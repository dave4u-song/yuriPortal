@{
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@model yuriPortal.Data.Models.BoardPost

<script src="/SCripts/drop/dropzone.js"></script>
<link rel="stylesheet" href="/SCripts/drop/dropzone.css">

<script type="text/javascript">
	function CheckRequiredFields() {
		var isValid = true;
		$('.required').each(function () {
			if ($.trim($(this).val()) == '') {
				isValid = false;
				$(this).addClass('red_border');
			}
			else {
				$(this).removeClass('red_border');

			}
		});
		return isValid;
	}
	var fileArray = [];
	var JSONQury = [];

	$(document).ready(function () {

		$("#btnSave").click(function () {

			$('#mySpinner').addClass('spinner');
			var BoardId		= $("#ddlBoard option:selected").val();
			var subject		= $("#subject").val();
			var ContendVal	= $("#compose-field").code();
			var PostId		= $("#PostId").val();

			console.log(BoardId);
			console.log(subject);
			//console.log(ContendVal);
			console.log(JSON.stringify(JSONQury));

			//return false;
			if (PostId == null || PostId.length == 0)
				PostId = 0;

                $.ajax({
                    url: '@Url.Action("SavePost", "Post")',
                        type: 'POST',
						data: JSON.stringify({ "Board_id": BoardId, "PostId": PostId, "PostSubject": subject, "PostContent": ContendVal, "PostAttach": fileArray}),
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
						success: function (result) {
						//$('#mySpinner').removeClass('spinner');

							if (result.success) {

								//$("#btnClose").click();
								//afterSave();
								alert("OK");
							}
							else {
								alert(result.SaveError);
							}
						},
						error: function (result) {
							alert("Wrong == " + result);
						}
						});


		});


	});

</script>


<section class="panel">
	<header class="panel-heading">
		<h2 class="panel-title">New post</h2>
	</header>
	<div class="hpanel email-compose mg-b-15">
		<div class="panel-heading hbuilt">
			<div class="p-xs">
				<div class="form-group">
					<label class="col-sm-1 control-label">Board:</label>
					<div class="col-sm-11">
						@Html.DropDownList("groupList", (IEnumerable<SelectListItem>)ViewBag.groupList, null, new { @class = "form-control populate", @id = "ddlBoard" })
					</div>
				</div>
			</div>
		</div>
		<div class="panel-heading hbuilt">
			<div class="p-xs">
				<div class="form-group">
					<label class="col-sm-1 control-label">Subject:</label>
					<div class="col-sm-11">
						<input type="text" id="subject" class="form-control input-sm" />
						<input type="hidden" id="PostId" class="form-control input-sm" />
					</div>
				</div>
			</div>
		</div>



		<!-- start:<section class="content-with-menu content-with-menu-has-toolbar mailbox"> page -->

		<div class="content-with-menu-container" data-mailbox data-mailbox-view="compose">
			<div class="mailbox-compose">

				<div class="form-group">
					<div class="compose">
						<div id="compose-field" class="compose-control">
						</div>
					</div>
				</div>

			</div>

		</div>

		@*<div class="col-md-12">
				<div class="summernote" data-plugin-summernote data-plugin-options='{ "height": 180, "codemirror": { "theme": "ambiance" } }'>Start typing...</div>
			</div>*@

		<!-- end: page -->
		<div class="panel-body">
			<div id="dropzone">
				<form action="/Post/SaveAttachFiles" class="dropzone needsclick" id="dropzoneForm">

					<div class="dz-message needsclick">
						Drop files here or click to upload.
					</div>

				</form>
			</div>
		</div>

		<div class="panel-footer">
			<div class="pull-right">
				<div class="btn-group">
					<button class="btn btn-default" id="btnSave"><i class="fa fa-edit"></i> Save</button>
					<button class="btn btn-default" onclick="history.go(-1); return false;"><i class="fa fa-trash"></i> Discard</button>
				</div>
			</div>
			<button class="btn btn-primary ft-compse" id="btnPublish">Publish</button>
			@*<div class="btn-group">
					<button class="btn btn-default"><i class="fa fa-paperclip"></i> </button>
					<button class="btn btn-default"><i class="fa fa-image"></i> </button>
				</div>*@

		</div>
	</div>



	<div class="form-group">

	</div>
</section>



<script type="text/javascript">
	//Dropzone.autoDiscover = false;
	var dropZoneInstance;

	function arrayToString(arr) {
		let str = '';
		arr.forEach(function (i, index) {
			str += i;
			if (index != (arr.length - 1)) {
				str += ',';
			};
		});
		return str;
	}

	$(document).ready(function () {


		Dropzone.options.dropzoneForm = {
			paramName: "file", // The name that will be used to transfer the file
			maxFiles: 5,
			maxFilesize: 2, // MB
			addRemoveLinks: true,
			accept: function (file, done) {
				if (file.name == "justinbieber.jpg") {
					done("Naha, you don't.");
				}
				else { done(); }
			},
			init: function () {
				var myDropzone = this;

				function getDropZoneInstance() {
					return myDropzone;
				}

				this.on("success", function (data) {
					//console.log(data);
					//console.log(data.xhr);
					//console.log("Data 2: " + JSON.stringify(data.xhr.response));

					//console.log(data.xhr.response);

					//var SaveFile = data.xhr.response.match(/\[.*\]/gi);
					//console.log(SaveFile.replace("/\[.*\]/g", ""));
					console.log("=======================================");
					console.log(fileArray);
					console.log("=======================================");

					fileArray.push(data.xhr.response);
					console.log(fileArray);
            });
				//this.on("success", function (file, responseText) {
				//	var responseText = file.id // or however you would point to your assigned file ID here;
				//	console.log(responseText); // console should show the ID you pointed to
				//	// do stuff with file.id ...
				//});

				//dropZoneInstance = new Dropzone("div#dropzone", { url: "/file/post" });
				//dropZoneInstance = getDropZoneInstance;

				//buildImages(myDropzone, "");
			}
			//success: function (file, response) {
			//	//console.log(file);
			//	console.log("=======================");
			//	console.log(response);
			//	console.log("=======================");
			//	//$('#display_images').html(response);
			//},
		};


		//Dropzone.options.dropzoneForm = {
		//	paramName: "file",
		//	autoProcessQueue: true,
		//	maxFiles: 2,
		//	maxFilesize: 1,
		//	autoQueue: false,
		//	addRemoveLinks: true,
		//	acceptedFiles: ".png,.jpg,.gif,.bmp,.jpeg,.pdf",
		//	init: function () {

		//	},
		//	accept: function (file, done) {
		//		if (file.name == "test.jpg") {
		//			alert("Can't upload a test file.");
		//		}
		//		else {
		//			//Show a confirm alert and display the image on the page.
		//		}
		//	},
		//	init: function () {
		//		this.on("addedfile", function (file) {
		//			console.log(file.name);

		//		});

		//		var self = this;

		//		// config
		//		self.options.addRemoveLinks = true;
		//		self.options.dictRemoveFile = "Delete";
		//		//New file added
		//		self.on("addedfile", function (file) {
		//			console.log('new file added ', file);
		//		});
		//		// Send file starts
		//		self.on("sending", function (file) {
		//			console.log('upload started', file);
		//			$('.meter').show();
		//		});
		//		// File upload Progress
		//		self.on("totaluploadprogress", function (progress) {
		//			console.log("progress ", progress);
		//			$('.roller').width(progress + '%');
		//		});

		//		self.on("queuecomplete", function (progress) {
		//			$('.meter').delay(999).slideUp(999);
		//		});

		//		// On removing file
		//		self.on("removedfile", function (file) {
		//			console.log(file);
		//		});
		//	}
		//};



	});


	function buildImages(dz, imgs) {
		//var mockFile = { "133.jpg": "133", size: 12345 };
		// Call the default addedfile event handler

		var mockFile = { name: 'mock_file_1', size: 5000, isMock: true, serverImgUrl: "133.jpg" }

		dz.emit("addedfile", mockFile);
		// And optionally show the thumbnail of the file:
		//dz.createThumbnailFromUrl(mockFile, "/Images/WallImages/imagepath/133.jpg");

		dz.emit("thumbnail", mockFile, "/Images/WallImages/imagepath/133.jpg");
		dz.emit("complete", mockFile);
		//        for (var i = 0; i < imgs.length; i++) {
		//var mockFile = { "133.jpg": "133", size: 12345 };
		//            // Call the default addedfile event handler
		//            dz.emit("addedfile", mockFile);
		//            // And optionally show the thumbnail of the file:
		//dz.emit("thumbnail", mockFile, "/Image/WallImages/imagepath/");
		//        }
		// If you use the maxFiles option, make sure you adjust it to the
		// correct amount:
		var existingFileCount = 1; // The number of files already uploaded

		dz.options.maxFiles = dz.options.maxFiles - existingFileCount;
	}
</script>